@import 'tailwindcss';
@import './prism.css' layer(components);

@config '../../tailwind.config.js';

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }
}

.prose :where(img.no-rounding):not(:where([class~="not-prose"] *)) {
    border-radius: 0;
}

@layer components {
  .article {
    width: 100%;
    max-width: min(68ch, 100%);
    margin-inline: auto;
  }

  .article .prose {
    max-width: min(68ch, 100%);
    margin-inline: auto;
    color: #000000;
    hyphens: auto;
    font-variant-ligatures: common-ligatures;
    font-variant-numeric: oldstyle-nums;
    text-rendering: optimizeLegibility;
  }

  .article .prose :where(p, li, blockquote, figcaption, table, td, th):not(:where([class~="not-prose"] *)) {
    font-family: 'Source Serif 4', 'Charter', 'Georgia', 'Times New Roman', serif;
  }

  .article .prose :where(h2, h3, h4, h5, h6):not(:where([class~="not-prose"] *)) {
    font-family: 'Source Serif 4', 'Charter', 'Georgia', 'Times New Roman', serif;
  }

  .dark .article .prose {
    color: #d4d4d8;
  }

  .dark {
    --surface: #15171c;
  }

  .article .prose :where(p):not(:where([class~="not-prose"] *)) {
    font-size: 1.25625rem;
    line-height: 1.65;
    margin-block: 14px;
  }

  .article .prose :where(a):not(:where([class~="not-prose"] *)) {
    text-decoration-line: underline;
    text-underline-offset: 3px;
    text-decoration-thickness: 0.08em;
    overflow-wrap: anywhere;
    word-break: break-word;
  }

  .article .prose :where(h2):not(:where([class~="not-prose"] *)) {
    font-size: 1.6rem;
    line-height: 1.28;
    margin-top: 28px;
    margin-bottom: 12px;
    font-weight: 600;
    letter-spacing: -0.005em;
  }

  .article .prose :where(h3):not(:where([class~="not-prose"] *)) {
    font-size: 1.3rem;
    line-height: 1.35;
    margin-top: 24px;
    margin-bottom: 10px;
    font-weight: 600;
  }

  .article .prose :where(li):not(:where([class~="not-prose"] *)) {
    font-size: 1.25625rem;
    line-height: 1.65;
  }

  .article .prose :where(figure):not(:where([class~="not-prose"] *)) {
    margin-block: 24px;
  }

  @media (min-width: 768px) {
    .article .prose :where(figure):not(:where([class~="not-prose"] *)) {
      width: 104%;
      margin-left: -2%;
    }
  }

  .article .prose :where(figure img):not(:where([class~="not-prose"] *)) {
    border-radius: 16px;
    box-shadow: 0 12px 24px rgba(15, 23, 42, 0.08);
    width: 100%;
    height: auto;
  }

  .dark .article .prose :where(figure img):not(:where([class~="not-prose"] *)) {
    box-shadow: 0 12px 28px rgba(15, 15, 20, 0.45);
  }

  .article .prose :where(figure span):not(:where([class~="not-prose"] *)) {
    display: block;
  }

  .article .prose :where(figcaption):not(:where([class~="not-prose"] *)) {
    font-size: 0.875rem;
    color: #71717a;
    margin-top: 8px;
    margin-bottom: 8px;
  }

  .dark .article .prose :where(figcaption):not(:where([class~="not-prose"] *)) {
    color: #a1a1aa;
  }

  .marker {
    position: relative;
    display: inline;
    padding-inline: 0.16em;
    font-weight: inherit;
    color: inherit;
    background-image: linear-gradient(
      110deg,
      rgba(255, 254, 242, 0.96) 0%,
      rgba(254, 240, 138, 0.96) 38%,
      rgba(253, 224, 71, 0.92) 75%,
      rgba(255, 244, 195, 0.92) 100%
    );
    background-size: 100% 74%;
    background-position: 0 72%;
    background-repeat: no-repeat;
    border-radius: 6px;
    pointer-events: none;
    z-index: 0;
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone;
  }

  .marker::before {
    content: '';
    position: absolute;
    inset: 68% -0.26em -48%;
    background: radial-gradient(55% 95% at 50% 0%, rgba(253, 224, 71, 0.45), rgba(253, 224, 71, 0));
    filter: blur(8px);
    opacity: 0.75;
    z-index: -1;
    transform: rotate(-1deg);
  }

  .marker::after {
    content: '';
    position: absolute;
    inset: 8% -0.18em 58%;
    background: linear-gradient(120deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));
    opacity: 0.7;
    z-index: -1;
    transform: rotate(1.2deg);
  }

  .dark .marker {
    color: inherit;
    background-color: var(--surface);
    background-image: linear-gradient(
      110deg,
      rgba(253, 230, 138, 0.24) 0%,
      rgba(246, 208, 93, 0.22) 38%,
      rgba(240, 192, 72, 0.2) 75%,
      rgba(255, 236, 150, 0.18) 100%
    );
    background-blend-mode: screen;
    background-size: 100% 74%;
    background-position: 0 72%;
    background-repeat: no-repeat;
    border-radius: 6px;
    box-shadow: 0 10px 26px rgba(0, 0, 0, 0.28);
  }

  .dark .marker::before {
    opacity: 0.45;
    filter: blur(10px);
    background: radial-gradient(60% 110% at 50% 0%, rgba(246, 208, 93, 0.22), rgba(246, 208, 93, 0));
  }

  .dark .marker::after {
    opacity: 0.35;
    background: linear-gradient(120deg, rgba(255, 255, 255, 0.14), rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0));
  }
}
